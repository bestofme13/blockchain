const Web3 = require('web3');
const web3 = new Web3(window.ethereum);


const contractAddress = "0xe375cd1e3d4Ef137E25B176DC89831b8f66D4Bd7"; // Replace with the actual contract address
const abi = [
	{
		"inputs": [],
		"name": "getOutcome",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "bytes32",
				"name": "encrMove",
				"type": "bytes32"
			}
		],
		"name": "play",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "register",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "clearMove",
				"type": "string"
			}
		],
		"name": "reveal",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "bothPlayed",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "bothRevealed",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "clearMovePlayer1",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "clearMovePlayer2",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "contractBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "getContractBalance",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "hashedMovePlayer1",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "",
				"type": "bytes32"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "hashedMovePlayer2",
		"outputs": [
			{
				"internalType": "bytes32",
				"name": "",
				"type": "bytes32"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "minimumBet",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "player1",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "player2",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "revealTimeLeft",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "revealTimeout",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "whoAmI",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]; // Replace with the actual ABI of your contract
const contract = new web3.eth.Contract(contractABI, contractAddress);

// Function to start a new game
async function startGame(movePlayer1) {
    try {
        const accounts = await web3.eth.getAccounts();
        const hashedMovePlayer1 = web3.utils.soliditySha3(movePlayer1);
        const gas = await contract.methods.createGame(hashedMovePlayer1).estimateGas();
        const tx = await contract.methods.createGame(hashedMovePlayer1).send({
            from: accounts[0],
            gas: gas,
            value: web3.utils.toWei("0.0001", "ether") // 0.0001 tBNB
        });
        console.log("Transaction Hash:", tx.transactionHash);
    } catch (error) {
        console.error("Error:", error);
    }
}

// Function to join an existing game
async function joinGame(player1Address, movePlayer2) {
    try {
        const accounts = await web3.eth.getAccounts();
        const gas = await contract.methods.joinGame(player1Address, movePlayer2).estimateGas();
        const tx = await contract.methods.joinGame(player1Address, movePlayer2).send({
            from: accounts[0],
            gas: gas,
            value: web3.utils.toWei("0.0001", "ether") // 0.0001 tBNB
        });
        console.log("Transaction Hash:", tx.transactionHash);
    } catch (error) {
        console.error("Error:", error);
    }
}

// Function to reveal the move and determine the outcome
async function revealMove(movePlayer1, clearMovePlayer1) {
    try {
        const accounts = await web3.eth.getAccounts();
        const gas = await contract.methods.revealMove(movePlayer1, clearMovePlayer1).estimateGas();
        const tx = await contract.methods.revealMove(movePlayer1, clearMovePlayer1).send({
            from: accounts[0],
            gas: gas
        });
        console.log("Transaction Hash:", tx.transactionHash);
    } catch (error) {
        console.error("Error:", error);
    }
}

// Function to withdraw funds
async function withdrawFunds() {
    try {
        const accounts = await web3.eth.getAccounts();
        const gas = await contract.methods.withdraw().estimateGas();
        const tx = await contract.methods.withdraw().send({
            from: accounts[0],
            gas: gas
        });
        console.log("Transaction Hash:", tx.transactionHash);
    } catch (error) {
        console.error("Error:", error);
    }
}
